#!/usr/bin/env python3
"""
Script de prueba b√°sico para FitnessAgent (sin Supabase)
"""
import asyncio
import logging
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def test_fitness_agent_basic():
    """
    Probar el FitnessAgent sin dependencias de Supabase
    """
    print("üß™ Iniciando pruebas b√°sicas del FitnessAgent...")
    
    try:
        # Importar solo despu√©s de configurar logging
        from agents.fitness_agent import FitnessAgent
        from config.settings import get_settings
        
        # Verificar configuraci√≥n b√°sica
        settings = get_settings()
        print(f"‚úÖ Configuraci√≥n cargada - Ambiente: {settings.APP_ENV}")
        
        if not settings.ANTHROPIC_API_KEY:
            print("‚ö†Ô∏è ADVERTENCIA: ANTHROPIC_API_KEY no configurada")
            print("   El agente no podr√° generar respuestas con IA")
        else:
            print("‚úÖ Claude API Key configurada")
        
        # Crear agente
        print("\nü§ñ Inicializando FitnessAgent...")
        fitness_agent = FitnessAgent()
        print("‚úÖ FitnessAgent inicializado correctamente")
        print(f"   - Nombre: {fitness_agent.name}")
        print(f"   - Herramientas disponibles: {len(fitness_agent.tools)}")
        
        # Listar herramientas
        print("\nüõ†Ô∏è Herramientas disponibles:")
        for i, tool in enumerate(fitness_agent.tools, 1):
            print(f"   {i}. {tool.name} - {tool.description.split('.')[0].strip()}")
        
        # Verificar base de conocimiento
        print(f"\nüìö Base de conocimiento cargada:")
        for nivel, ejercicios in fitness_agent.exercise_database.items():
            print(f"   - {nivel.title()}: {sum(len(cat) for cat in ejercicios.values())} ejercicios")
        
        # Prueba b√°sica sin herramientas (usando m√©todo base)
        print("\nüîß Probando respuesta b√°sica (sin herramientas)...")
        try:
            # Usar el m√©todo base directamente para evitar herramientas
            from agents.base_agent import BaseAgent
            basic_response = await BaseAgent.process(fitness_agent, 
                "Hola, soy principiante en fitness. ¬øPuedes darme algunos consejos b√°sicos?")
            
            print("‚úÖ Respuesta b√°sica generada:")
            print(f"   Longitud: {len(basic_response)} caracteres")
            print(f"   Preview: {basic_response[:150]}{'...' if len(basic_response) > 150 else ''}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en respuesta b√°sica: {str(e)}")
            print("   Esto es normal si no hay API key de Claude configurada")
        
        print("\n‚úÖ Pruebas b√°sicas completadas exitosamente!")
        
        # Informaci√≥n de configuraci√≥n
        print("\nüìã Resumen de configuraci√≥n:")
        print(f"   ‚Ä¢ Claude API Key: {'‚úÖ Configurada' if settings.ANTHROPIC_API_KEY else '‚ùå No configurada'}")
        print(f"   ‚Ä¢ Claude Model: {settings.CLAUDE_MODEL}")
        print(f"   ‚Ä¢ Supabase URL: {'‚úÖ Configurada' if settings.SUPABASE_URL else '‚ùå No configurada'}")
        print(f"   ‚Ä¢ Supabase Key: {'‚úÖ Configurada' if settings.SUPABASE_KEY else '‚ùå No configurada'}")
        print(f"   ‚Ä¢ Multi-Agent: {'‚úÖ Habilitado' if settings.ENABLE_MULTI_AGENT else '‚ùå Deshabilitado'}")
        
        print("\nüí° Pr√≥ximos pasos:")
        print("   1. Configura las credenciales de Claude y Supabase en .env")
        print("   2. Ejecuta el schema.sql en tu proyecto de Supabase")
        print("   3. Ejecuta test_fitness_integration.py para pruebas completas")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {str(e)}")
        print("   Verifica que todas las dependencias est√©n instaladas:")
        print("   pip install -r requirements.txt")
        return False
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_fitness_agent_basic())
    sys.exit(0 if success else 1)
