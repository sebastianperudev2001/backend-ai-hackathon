#!/usr/bin/env python3
"""
Script para diagnosticar problemas de RLS (Row Level Security) en Supabase
"""
import os
from dotenv import load_dotenv

load_dotenv()

def test_rls_policies():
    """Diagnosticar problemas de pol√≠ticas RLS"""
    
    print("üîê Diagnosticando pol√≠ticas RLS en Supabase")
    print("=" * 50)
    
    try:
        from supabase import create_client
        
        url = os.getenv("SUPABASE_URL")
        key = os.getenv("SUPABASE_KEY")
        service_key = os.getenv("SUPABASE_SERVICE_KEY")
        
        if not url or not key:
            print("‚ùå Faltan credenciales b√°sicas")
            return False
        
        # 1. Probar con clave an√≥nima (la que usas normalmente)
        print("1. Probando con clave an√≥nima/p√∫blica:")
        client_anon = create_client(url, key)
        
        try:
            result = client_anon.table("users").select("*").limit(1).execute()
            print(f"‚úÖ Consulta an√≥nima exitosa: {len(result.data)} registros")
            if not result.data:
                print("üìù Tabla vac√≠a o sin permisos de lectura")
        except Exception as e:
            print(f"‚ùå Error con clave an√≥nima: {e}")
            if "permission denied" in str(e).lower() or "rls" in str(e).lower():
                print("üö® PROBLEMA CONFIRMADO: Faltan pol√≠ticas RLS para usuarios an√≥nimos")
            elif "relation" in str(e).lower() and "does not exist" in str(e).lower():
                print("üö® PROBLEMA: La tabla 'users' no existe")
            else:
                print("ü§î Error desconocido, puede ser problema de RLS")
        
        print()
        
        # 2. Probar con service key si est√° disponible
        if service_key:
            print("2. Probando con service key (bypassa RLS):")
            client_service = create_client(url, service_key)
            
            try:
                result = client_service.table("users").select("*").limit(5).execute()
                print(f"‚úÖ Consulta con service key exitosa: {len(result.data)} registros")
                if result.data:
                    print("üìã Datos encontrados con service key:")
                    for i, user in enumerate(result.data[:2]):
                        print(f"   {i+1}. ID: {user.get('id', 'N/A')}, Phone: {user.get('phone_number', 'N/A')}")
                    print("‚úÖ CONFIRMADO: Los datos existen, el problema son las pol√≠ticas RLS")
                else:
                    print("üìù Tabla vac√≠a (pero accesible con service key)")
            except Exception as e:
                print(f"‚ùå Error con service key: {e}")
        else:
            print("2. ‚ö†Ô∏è SUPABASE_SERVICE_KEY no configurada")
            print("   üí° Config√∫rala para hacer pruebas que bypassen RLS")
        
        print()
        
        # 3. Verificar informaci√≥n de la tabla
        print("3. Verificando informaci√≥n de la tabla:")
        try:
            # Intentar obtener informaci√≥n del esquema
            result = client_anon.rpc('get_table_info', {'table_name': 'users'}).execute()
            print(f"‚úÖ Informaci√≥n de tabla obtenida: {result.data}")
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo obtener info de tabla: {e}")
        
        print()
        
        # 4. Sugerencias de soluci√≥n
        print("4. üõ†Ô∏è SOLUCIONES SUGERIDAS:")
        print()
        print("   A) Crear pol√≠tica para SELECT (lectura):")
        print("   ```sql")
        print("   CREATE POLICY \"Allow public read access\" ON public.users")
        print("   FOR SELECT USING (true);")
        print("   ```")
        print()
        print("   B) Crear pol√≠tica para INSERT (escritura):")
        print("   ```sql") 
        print("   CREATE POLICY \"Allow public insert\" ON public.users")
        print("   FOR INSERT WITH CHECK (true);")
        print("   ```")
        print()
        print("   C) Crear pol√≠tica para UPDATE:")
        print("   ```sql")
        print("   CREATE POLICY \"Allow public update\" ON public.users")
        print("   FOR UPDATE USING (true) WITH CHECK (true);")
        print("   ```")
        print()
        print("   D) O deshabilitar RLS temporalmente (NO recomendado para producci√≥n):")
        print("   ```sql")
        print("   ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;")
        print("   ```")
        print()
        print("   üí° Ve al SQL Editor en tu dashboard de Supabase y ejecuta estas consultas")
        
        return True
        
    except ImportError:
        print("‚ùå Librer√≠a supabase no instalada")
        return False
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        return False


def check_table_exists():
    """Verificar si la tabla users existe"""
    print("\n" + "=" * 50)
    print("üìã Verificando si la tabla 'users' existe...")
    
    try:
        from supabase import create_client
        
        url = os.getenv("SUPABASE_URL")
        service_key = os.getenv("SUPABASE_SERVICE_KEY")
        
        if not service_key:
            print("‚ö†Ô∏è Necesitas SUPABASE_SERVICE_KEY para esta verificaci√≥n")
            return
        
        client = create_client(url, service_key)
        
        # Consultar el esquema de informaci√≥n
        result = client.rpc('get_schema_info').execute()
        print(f"‚úÖ Esquema obtenido: {result.data}")
        
    except Exception as e:
        print(f"‚ùå Error verificando tabla: {e}")


if __name__ == "__main__":
    print("üöÄ Iniciando diagn√≥stico de pol√≠ticas RLS")
    print()
    
    success = test_rls_policies()
    
    if success:
        check_table_exists()
    
    print("\n" + "=" * 50)
    print("üéØ RESUMEN:")
    print("- Si ves 'permission denied' o errores RLS ‚Üí Faltan pol√≠ticas")
    print("- Si funciona con service key pero no con anon key ‚Üí Problema de RLS")
    print("- Si no funciona ni con service key ‚Üí Problema de tabla o conexi√≥n")
    print("\nüí° Revisa las soluciones sugeridas arriba")
